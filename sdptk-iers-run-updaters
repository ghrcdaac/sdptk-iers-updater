#!/bin/bash
set -euo pipefail

Usage () { cat >&2 <<EOF
Usage: $0
Update SDPTK data files using IERS data
EOF
}

: "${PGSHOME:?Environment is not initialized correctly. See pgs-env}"

while [ $# -gt 0 ]
do
  case "$1" in
  --) shift ; break ;;
  -*) Usage ; exit 1 ;;
  *) break ;;
  esac
done
if [ $# -gt 0 ]
then
  Usage
  exit 1
fi

declare -A settings=(
    [leapsec]='
      output=leapsec.dat
      input=tai-utc.dat
      new=leapsec.dat.new
      datadir=TD
      updater=PGS_TD_NewLeap
      usesize=no
      postcheck=true
      declare -a failures
      failures[ 2]="Missing month name."
      failures[ 3]="Cannot open old leapsec.dat."
      failures[ 4]="Cannot open local scratch file."
      failures[ 5]="New header was too short."
      failures[ 6]="Data line too short."
      failures[ 7]="New USNO leap second before old final one."
      failures[ 9]="Cannot open data file from USNO."
      failures[12]="Old leap seconds file too long."
      failures[13]="Too many records in USNO data file."
      failures[14]="Problem reading data line in USNO file."
      failures[15]="Cannot close old leap seconds file."
      failures[18]="Cannot close data file from USNO."
      failures_default="Probable failure mode: executable PGS_TD_NewLeap missing or corrupted, or system was otherwise unable to execute program."
      declare -a warnings
      replace_rv=22
      warnings[22]="Could not replace leapsec.dat. Old one retained. Check file system, file permissions."
    '
    [utcpole]='
      output=utcpole.dat
      input=finals.data
      new=utcpole.dat.NEW
      datadir=CSC
      updater=PGS_CSC_UT1_update
      usesize=yes
      postcheck=check_utcpole_30_days
      declare -a failures
      failures[ 2]="File utcpole.dat found but could not be opened."
      failures[ 3]="Missing month name present."
      failures[ 4]="Could not create temporary file utcpole.dat.NEW used to hold the new utcpole.dat file during processing. Check file permissions."
      failures[ 5]="Trying to create too many records for storage within updating program."
      failures[ 6]="Could not close original file utcpole.dat. Rerun."
      failures[ 7]="Unable to open USNO data file finals.data. Check directory structure, rerun."
      failures[ 8]="Fewer than 8 fields found on a data line of finals.data. Rerun."
      failures[ 9]="Unexpected beginning of NEOS (USNO) data apparently before old utcpole data (which started in 1972). Rerun, check original file utcpole.dat."
      failures[10]="Your old file is too old to update as such; you need a later utcpole.dat on hand to process."
      failures[11]="String length or record length as written disagrees with required length for later reading; check LogStatus file for more."
      failures[12]="Could not close data file finals.data after use. Rerun."
      failures[13]="Could not close output file utcpole.dat.NEW. Rerun."
      failures[14]="Records in old utcpole file out of order. See User Log File for details."
      failures[15]="Two successive records in imported UNSO file finals.data were skipped, indicating MJD values too close. See User Log File for details."
      failures[20]="Old UT1 and polar motion file not found."
      failures[22]="The file finals.data is missing or too short. Rerun."
      failures_default="Probable failure mode: executable PGS_CSC_UT1_update missing or corrupted, or system was otherwise unable to execute program. Rerun."
      declare -a warnings
      replace_rv=21
      warnings[21]="Could not replace utcpole.dat. Old one retained. Check file permissions and rerun."
      postcheck_rv=23
      warnings[23]="Undersize utcpole.dat file generated. Old one retained. Rerun."
    '
)

check_utcpole_30_days () {
  local mjd rest
  read -r mjd rest < <(tail -n1 -- "$new") || return $postcheck_rv
  # 40587 is MJD for 1970-01-01
  local daysfromnow=$(expr "$mjd" - 40587 - $(date +%s) / 86400)
  [ $daysfromnow -ge 30 ] || return $postcheck_rv
  return 0
}

for s in "${settings[@]}"
do
  (
    source <(cat <<<"$s")
    cd -- "$PGSHOME/database/common/$datadir"
    if [ "$usesize" = yes ]
    then
      formatprefix=$(stat -c %s -- "$input")
    else
      formatprefix=''
    fi
    # Note: ls long format: if < 6 months ago, then %H:%M, else %Y
    # but the inputs should not be that old (or from the future)
    format="$formatprefix %b %d %H:%M"
    metadata=$(date "--reference=$input" "+$format")
    updater_rv=0
    "$updater" <<<"$metadata" || updater_rv=$?
    if [ $updater_rv -eq 0 ]
    then
      $postcheck || updater_rv=$?
    fi
    if [ $updater_rv -eq 0 ]
    then
      mv -f -- "$new" "$output" || updater_rv=$replace_rv
    fi
    if [ $updater_rv -ne 0 ]
    then
      if [ -n "${warnings[$updater_rv]:+x}" ]
      then
        printf >&2 'Warning from updater %s: %s\n' "$updater" "${warnings[$updater_rv]}"
      elif [ -n "${failures[$updater_rv]:+x}" ]
      then
        printf >&2 'Failure from updater %s: %s\n' "$updater" "${failures[$updater_rv]}"
      else
        printf >&2 'Error from updater %q: status %d\n' "$updater" $updater_rv
      fi
      exit $updater_rv
    fi
  )
done
